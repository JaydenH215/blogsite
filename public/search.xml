<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2019%2F05%2F16%2FBLE%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%2F%E6%95%B0%E6%8D%AE%E5%85%AC%E5%BC%8F%E6%88%AA%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[$$ 7^x mod 13 = 8 $$$$ 7^0 mod 13 = 1 $$$$ 7^1 mod 13 = 7 $$$$ 7^2 mod 13 = 10 $$$$ 7^3 mod 13 = 5 $$$$ 7^4 mod 13 = 9 $$$$ 7^5 mod 13 = 11 $$$$ 7^6 mod 13 = 12 $$$$ 7^7 mod 13 = 6 $$$$ 7^8 mod 13 = 3 $$$$ 7^9 mod 13 = 8$$ $$ Y=G^xmodp $$ $$ Y=x * G $$]]></content>
  </entry>
  <entry>
    <title><![CDATA[BLE安全机制从入门到放弃]]></title>
    <url>%2F2019%2F05%2F14%2FBLE%E5%AE%89%E5%85%A8%E6%9C%BA%E5%88%B6%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83%2F</url>
    <content type="text"><![CDATA[网上介绍BLE安全机制的文章大多只关注业务概念，如：配对加密是什么，绑定过程是什么；而忽略了其中涉及到的信息安全知识，如：使用了加密和认证有什么用，不用又会怎么样。让新人读了有种云里雾里，知其然而不知其所以然的感觉。这里结合涉及到的信息安全知识，换一个角度来认识BLE安全机制。 前言标题中的“放弃”有点调侃的意思，是指读者在读完之后，可以不依赖别人，靠自己读蓝牙核心规范加深认识，这样收获也会更多，也是这篇博文的目标。 为了易于理解，会对蓝牙核心规范以及组网规范中的算法进行裁剪，但是原理是不变的，标准算法应参考蓝牙核心规范以及组网规范。 最后，这是博主的一得之见，欢迎各位指正。 目录 密码技术初探 对称密码 Diffie-Hellman密钥交换算法 椭圆曲线Diffie-Hellman密钥交换算法 消息认证码 （CMAC） 信息安全小结 BLE安全机制初探 BLE4.0安全机制 BLE4.2安全机制 (ECDH/CMAC/CCM) BLE MESH安全机制初探 参考资料 密码技术初探在介绍密码技术之前，我们先给参与信息交互的对象赋予名称，方便举例和记忆。 重要角色一览表 Alice和Bob分别是两家银行，Alice银行通过网络向Bob银行发送了一条500元的汇款请求：从账户A-1234向账户B-7890汇款500元。 当然，会有人在网络中尝试攻击银行间通信，妄想用非法手段牟利，其中就有这样一个分工明确的组织，由以下成员组成： Eve 窃听不同银行之间的消息，从中获取重要信息，如获知“从账户A-1234向账户B-7890汇款500元”。 Mallory： 篡改不同银行之间的消息，如修改汇款请求为“从账户A-1234向账户B-7890汇款5000000元”。 伪装成Alice银行，以Alice银行名义发送一条新的汇款请求给Bob银行。 从上述例子可知消息面临的威胁有：窃听、篡改和伪装，对应的安全特性为：机密性、一致性、是否已认证。 “威胁”和“安全特性”的关系可以这样描述： 如果消息没有加密，消息则不具有机密性，无法防止他人窃听； 如果发送者发送的消息和接收者的消息是不同的，说明消息被篡改过，不具有一致性； 如果没有对消息进行认证，无法保证消息来自正确发送者而不是伪装者。 存在威胁，就会有对应的解决方法，下面会针对每个威胁介绍对应的密码技术。 对称密码算法一般指复杂步骤，加密算法指的是用明文生成密文的步骤，解密的步骤称为解密算法，两者统称为密码算法，密码算法需要用到密钥。 所谓对称密码（symmetric cryptography）技术，即加密和解密时用的是同一个密钥，加密和解密的算法一般是公开的，如AES128。 对称密码应用图 对称密码解决的问题 如上图所示 Bob创建一条汇款请求消息； 用密钥key对它加密； 将加密后的消息发给Alice； Alice收到密文； Eve窃听到了加密后的消息，由于没有密钥key，无法解读内容； Alice用密钥key对消息解密； Alice获得一条汇款请求消息。 对称密码技术可以解决窃听的威胁。 对称密码无法解决的问题 对称密码技术可以解决窃听的威胁，但是有一个前提，就是在这之前发送者和接收者要有相同的密钥key，所以一定要先给接收者配送密钥，有以下几种方式： Bob通过网络先将key发送给Alice，但容易被Eve截取到； Bob乘坐交通工具将密钥key亲手交给Alice，或者其他网络以外的方式配送密钥，这种方式成本高维护麻烦，称为带外（Out-Of-Band）配送； 用Diffie-Hellman密钥交换算法解决； 用椭圆曲线Diffie-Hellman密钥交换算法解决。 Diffie-Hellman密钥交换算法先不管DH密钥交换算法是什么，我们现在关注问题是：在Eve窃听网络的情况下，如何解决Bob配送key给Alice的问题？ 密码界的前辈们从数学角度上找到了答案：利用这个数学难题，Bob和Alice可以在Eve窃听的情况下，协商出一个密钥，而Eve不知道密钥是什么。 最好解决配送问题的办法就是不配送，通过协商获得相同的密钥，是不是很神奇，话不多说，我们看看是怎么实现的。 离散对数问题 背景知识：mod符号表达的意思是求余数，如表达式5 mod 7的计算思路为：5除以7等于0，余数为5，所以5 mod 7 = 5。 现有离散对数问题如下，请问满足公式的x是多少： 为了求x，我们可以运用上面提到的背景知识来做计算，像下面这样依次尝试一遍，就可以得到x = 9。 例子的数字较小，所以很快就找到答案了，当数字很大时，计算x就会变得非常耗时，快速求出离散对数的算法到现在还没被发现，所以可以得到这样的一个简单结论： 对于上图公式，已知G、p、Y的时候，很难求出x。 接下来我们看看如何具体利用这个数学问题来协商出密钥的。 Diffie-Hellman密钥交换算法应用 在DH中，我们将Y称为公钥（public key），将x称为私钥（private key），则有以下结论： 已知G、p、公钥的时候，很难求出私钥。 如上图所示 Bob和Alice选择一个公开的G和p，Eve当然也知道这个公开的G和p； Bob和Alice分别随机生成各自的私钥sb和sa； Bob和Alice根据G、p以及各自的私钥，生成公钥pb和pa； Bob和Alice互发公钥pb和pa，Eve窃听到了pb和pa； Bob和Alice计算出共享密钥DHkey。 Eve能计算出DHkey吗？ 对比三个角色最后的“已知信息”可知，只要Eve知道任一私钥（sb或sa），它就能容易算出DHkey，而这时候问题就变成了：Eve在已知G、p、公钥情况下，是否能求出私钥，这也就是我们上面提到的离散对数问题，这是很难做到的。 Diffie-Hellman密钥交换算法解决的问题 因为DH密钥交换算法利用了“离散对数问题”的复杂度，所以就算Eve一直窃听，Bob和Alice也能协商出一个共享密钥，而Eve却因为复杂的数学问题而没办法算出共享密钥，也就解决了对称密码中的配送问题。 椭圆曲线Diffie-Hellman密钥交换算法DH是利用了“离散对数问题”的复杂度来实现密钥的安全交换的，如果将“离散对数问题”改为“椭圆曲线上的离散对数问题”，这样的算法就叫椭圆曲线Diffie-Hellman密钥交换（ECDH）。 两者密钥交换总体流程相同，只是利用的数学问题不同而已，ECDH能够用较短的密钥长度实现较高的安全性。 椭圆曲线Diffie-Hellman密钥交换算法应用 ECDH中的数学问题可以这样简单定义： 已知椭圆曲线上的点Y、基点G的时候，很难求出x。其中算术符号*表示的不是普通的乘法，而是一种在椭圆曲线上的特殊算法。 在ECDH中，我们称Y为公钥（public key），x为私钥（private key）。 如上图所示 Bob和Alice选择一条密码学家推荐的椭圆曲线，选择曲线上的一个基点G； Bob和Alice分别随机生成各自的私钥sb和sa； Bob和Alice根据G以及各自的私钥，生成公钥pb和pa； Bob和Alice互发公钥pb和pa，Eve窃听到了pb和pa； Bob和Alice计算出共享密钥DHkey。 椭圆曲线Diffie-Hellman密钥交换算法无法解决的问题 DH和ECDH都能解决密钥配送问题，结合对称密码技术，就能保证消息的机密性，防止被窃听了，但是对于篡改和伪装的攻击，却无能为力。为了解决剩下这两个威胁，就要靠其他技术手段了。 消息认证码 （CMAC）信息安全小结 总结上述例子中，用到了多少种密钥 BLE安全机制初探BLE4.0安全机制思路：配对过程得到STK/LTK，过程中认证，衍生sessionKey，sessionKey用于CCM，介绍CCM，CCM = pf_auth + pf_enc BLE4.2安全机制 (ECDH/CMAC/CCM)思路：4.0的配送问题引出ECDH，增加CMAC过程（不一定写），最后也是用CCM。 BLE MESH安全机制初探思路：配网过程引入ECDH（待定)。 参考资料 《图解密码技术》 BLE配对过程详解 BLE核心规范]]></content>
      <categories>
        <category>一得之见</category>
      </categories>
      <tags>
        <tag>BLE</tag>
        <tag>安全机制</tag>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搭建实战]]></title>
    <url>%2F2019%2F05%2F10%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[Hexo 是一个快速、简洁且高效的博客框架，支持个性化的配置。这篇博文记录了搭建过程。 目录 配置主题 配置风格 配置语言 配置描述 配置目录 配置头像 配置拉条 配置社交 配置打赏 配置菜单 配置标签 配置分类 配置评论 配置分享 配置版权 配置脚注 配置统计 配置搜索 博文置顶 博文插图 配置主题修改博客工程根目录下的_config.yml文件 theme: hexo-theme-next 配置风格修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 scheme: Mist 配置语言修改博客工程根目录下的_config.yml文件 language: zh-CN 配置描述修改博客工程根目录下的_config.yml文件 description: &quot;Stay hungry, Stay foolish.&quot; 配置目录修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 toc: enable: true number: false 配置头像将头像图片文件123.jpg放进/source/images中，修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 avatar: url: /images/123.jpg 配置拉条none 配置社交修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 social: GitHub: https://github.com/jaydenh215 || github 配置打赏将打赏图片文件wechatpay.jpg放进/source/images中，修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 reward_settings: enable: true comment: “如果觉得还不错，请我喝杯咖啡吧~” reward: wechatpay: /images/wechatpay.jpg 配置菜单修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 menu: home: / || home tags: /tags/ || tags categories: /categories/ || th 配置标签增加一个页面（page）用来汇总标签 hexo new page tags 修改生成的页面文件内容（/source/tags/index.md） --- title: tags date: 2019-05-10 13:49:39 type: &quot;tags&quot; --- 给文章添加标签属性 --- title: 博客个性化配置 date: 2019-05-10 10:00:00 tags: - 博客 - 搭建 - 环境 - 配置 --- 配置分类增加一个页面（page）用来汇总类别 hexo new page categories 修改生成的页面文件内容（/source/categories/index.md） --- title: categories date: 2019-05-10 13:44:06 type: &quot;categories&quot; --- 给文章添加类别属性 --- title: 博客个性化配置 date: 2019-05-10 10:00:00 categories: - 社交 --- 配置评论next主题集成了许多第三方厂家的评论功能插件，选择比较精简的Valine。 修改主题目录（/themes/hexo-theme-next）下的_config.yml文件，主要是app id和app key。 valine: enable: true appid: xxxxxxxxxx appkey: xxxxxxxxxx guest_info: nick,mail notify: true placeholder: Comment here ... 增加评论区之后，右下角会有Power by Valine，可以这样删掉： 找到/themes/hexo-theme-next/layout/_third-party/comments/valine.swig文件并修改代码 修改前： &lt;script&gt; var GUEST = [&apos;nick&apos;, &apos;mail&apos;, &apos;link&apos;]; var guest = &apos;{{ theme.valine.guest_info }}&apos;; guest = guest.split(&apos;,&apos;).filter(function(item) { return GUEST.indexOf(item) &gt; -1; }); new Valine({ el: &apos;#comments&apos;, verify: {{ theme.valine.verify }}, notify: {{ theme.valine.notify }}, appId: &apos;{{ theme.valine.appid }}&apos;, appKey: &apos;{{ theme.valine.appkey }}&apos;, placeholder: &apos;{{ theme.valine.placeholder }}&apos;, avatar: &apos;{{ theme.valine.avatar }}&apos;, meta: guest, pageSize: &apos;{{ theme.valine.pageSize }}&apos; || 10, visitor: {{ theme.valine.visitor }}, lang: &apos;{{ theme.valine.language }}&apos; || &apos;zh-cn&apos; }); &lt;/script&gt; 修改后： &lt;script&gt; var GUEST = [&apos;nick&apos;, &apos;mail&apos;, &apos;link&apos;]; var guest = &apos;{{ theme.valine.guest_info }}&apos;; guest = guest.split(&apos;,&apos;).filter(function(item) { return GUEST.indexOf(item) &gt; -1; }); new Valine({ el: &apos;#comments&apos;, verify: {{ theme.valine.verify }}, notify: {{ theme.valine.notify }}, appId: &apos;{{ theme.valine.appid }}&apos;, appKey: &apos;{{ theme.valine.appkey }}&apos;, placeholder: &apos;{{ theme.valine.placeholder }}&apos;, avatar: &apos;{{ theme.valine.avatar }}&apos;, meta: guest, pageSize: &apos;{{ theme.valine.pageSize }}&apos; || 10, visitor: {{ theme.valine.visitor }}, lang: &apos;{{ theme.valine.language }}&apos; || &apos;zh-cn&apos; }); //新增 var infoEle= document.querySelector(&apos;#comments .info&apos;); if (infoEle &amp;&amp; infoEle.childNodes &amp;&amp; infoEle.childNodes.length &gt; 0) { infoEle.childNodes.forEach(function(item) { item.parentNode.removeChild(item); }); } &lt;/script&gt; 配置分享修改博客工程根目录下的_config.yml文件 baidushare: true 修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 baidushare: type: button 按照链接中的方法，将static放进/themes/hexo-theme-next/source目录下。 修改baidushare.swig文件中的代码。 修改前： .src=&apos;//bdimg.share.baidu.com/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)]; 修改后： .src=&apos;/static/api/js/share.js?cdnversion=&apos;+~(-new Date()/36e5)]; 配置版权修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 creative_commons: post: true 修改博客工程根目录下的_config.yml文件 url: https://jaydenh215.github.io/ 配置脚注修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 footer: powered: enable: false theme: enable: false 配置统计next主题集成了许多第三方厂家的统计功能插件，选择LeanCloud。 完成上述步骤之后，会发现阅读次数后面没有数字，那是因为LeanCloud和next主题还没有联系起来，需要按照该博主的方法来实现。 部署云引擎以保证访客数量不被随意篡改 20190514：总是有问题，所以现在先把leancloud_visitors安全设置为false。 配置搜索next主题推荐使用Local Search 博文置顶参考这里 博文插图修改主题目录（/themes/hexo-theme-next）下的_config.yml文件 post_asset_folder: true 这样每次hexo new XX，都会同时生成一个XX文件夹用来放图片。 为了去掉插图的边框，找到/themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl文件并修改代码。 img { box-sizing: border-box; margin: auto; padding: 0px; border: 0px; }]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>博客</tag>
        <tag>搭建</tag>
        <tag>配置</tag>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
